{"version":3,"sources":["redux/slices/ShoppingListSlice.jsx","redux/configureStore.jsx","utils/theme.js","utils/ColorModeSwitcher.js","components/AppNavbar.jsx","components/PageContainer.jsx","components/AddItem.jsx","components/ShoppingList.jsx","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["getShoppingList","createAsyncThunk","a","fetch","res","json","data","addItem","new_item","dispatch","getState","method","headers","body","JSON","stringify","deleteItem","id","checkItem","isChecked","shoppingListSlice","createSlice","name","initialState","shoppingList","loading","extraReducers","fulfilled","state","action","payload","store","configureStore","reducer","shoppingListReducer","customTheme","extendTheme","colors","error","theme","red","primary","teal","success","green","backgroundColor","light","gray","dark","boxBackgroundColor","whiteAlpha","placeholder","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","AppNavbar","justifyContent","alignItems","position","minW","bg","h","zIndex","boxShadow","px","base","py","marginBottom","mx","width","md","fontWeight","href","justifySelf","PageContainer","colorMode","minH","flexDirection","pb","height","pt","children","AddItem","useDisclosure","isOpen","onOpen","onClose","useDispatch","useForm","handleSubmit","register","formState","errors","isSubmitting","onSubmit","values","item","Add","isRound","colorScheme","isInvalid","ref","validate","value","autoFocus","message","type","mr","isLoading","loadingText","ShoppingList","useSelector","useEffect","rounded","p","alignSelf","length","spacing","mt","w","map","in","minw","display","Check","_id","as","opacity","flexGrow","isTruncated","Delete","isIndeterminate","orientation","my","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.00cb47c4.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const getShoppingList = createAsyncThunk(\"shoppingList/getShoppingList\", async () => {\n  const res = await fetch(\n    \"/api/items\"\n  );\n  const data = await res.json();\n  return data;\n});\n\nexport const addItem = createAsyncThunk(\"shoppingList/addItem\", async (new_item, { dispatch, getState }) => {\n  const res = await fetch(\n    '/api/items', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(new_item)\n  },\n  );\n\n\n  return res;\n});\n\nexport const deleteItem = createAsyncThunk(\"shoppingList/deleteItem\", async ({ id }, { dispatch, getState }) => {\n  const res = await fetch(\n    `/api/items/${id}`, {\n    method: 'DELETE',\n  },\n  );\n\n  // const data = await res.json();\n  // return data;\n  return res;\n});\n\nexport const checkItem = createAsyncThunk(\"shoppingList/checkItem\", async ({ id, isChecked }, { dispatch, getState }) => {\n  const res = await fetch(\n    `/api/items/${id}`, {\n    method: 'PATCH',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ isChecked })\n  },\n  );\n\n  // const data = await res.json();\n  // return data;\n  return res;\n});\n\n\n\n\nconst shoppingListSlice = createSlice({\n  name: 'shoppingList',\n  initialState: {\n    shoppingList: [],\n    loading: null,\n  },\n  extraReducers: {\n    [getShoppingList.fulfilled]: (state, action) => {\n      state.shoppingList = action.payload;\n      state.loading = 'success';\n    },\n\n  },\n  // reducers: {\n  //   addShoppingItem: (state, action) => {\n  //     state.shoppingList = [...state.shoppingList, { name: action.payload.name, isChecked: false }];\n  //   },\n\n  //   deleteShoppingItem: (state, action) => {\n  //     state.shoppingList = state.shoppingList.filter(item => item.id !== action.payload.id);\n  //   },\n\n  //   checkShoppingItem: (state, action) => {\n  //     state.shoppingList = (state.shoppingList.map(item => {\n  //       if (item.id === action.payload.id) {\n  //         item.isChecked = !item.isChecked;\n  //       }\n  //       return { ...item };\n  //     }));\n  //   }\n  // }\n});\n\n// export const { addItem, deleteItem, checkItem } = shoppingListSlice.actions;\n\nexport default shoppingListSlice.reducer;\n\n","import { configureStore } from \"@reduxjs/toolkit\";\n\n// import TodosSlice from \"./slices/TodosSlice\";\n// import TodoDetailsSlice from \"./slices/TodoDetailsSlice\";\nimport shoppingListReducer from './slices/ShoppingListSlice';\n\nconst store = configureStore({\n  reducer: {\n    // todos: TodosSlice,\n    // todoDetails: TodoDetailsSlice,\n    shoppingList: shoppingListReducer\n  },\n});\n\nexport default store;\n","import { extendTheme, theme } from \"@chakra-ui/react\";\n\n\n\nconst customTheme = extendTheme({\n  colors: {\n    error: theme.colors.red,\n    primary: theme.colors.teal,\n    success: theme.colors.green,\n    backgroundColor: {\n      light: theme.colors.gray['100'],\n      dark: theme.colors.gray['800']\n    },\n    boxBackgroundColor: {\n      light: theme.colors.whiteAlpha['900'],\n      dark: theme.colors.gray['700']\n    },\n    placeholder: {\n      light: theme.colors.gray['400'],\n      dark: theme.colors.whiteAlpha['400']\n    }\n  }\n});\n\nexport default customTheme;","import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React from \"react\";\nimport {\n  Box,\n  Flex,\n  Link\n} from \"@chakra-ui/react\";\n\nimport { ColorModeSwitcher } from '../utils/ColorModeSwitcher';\n\n\nconst AppNavbar = () => {\n  return (\n    <Flex\n      justifyContent='space-between'\n      alignItems='center'\n      position='fixed'\n      minW='100%'\n      bg={'inherit'}\n      h={16}\n      zIndex={4}\n      boxShadow='lg'\n    >\n      <Flex\n        px={{ base: 4 }}\n        py={{ base: 2 }}\n        alignItems='center'\n        justifyContent=\"space-between\"\n        marginBottom={2}\n        mx='auto'\n        width={{ base: '90%', md: '75%' }}\n      >\n        <Box fontWeight='bold' fontSize='lg'>\n          <Link href='/'>Shopping List</Link>\n        </Box>\n        <ColorModeSwitcher\n          justifySelf=\"flex-end\"\n        />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default AppNavbar;","import React from 'react';\nimport { Flex, useColorMode } from '@chakra-ui/react';\n\nimport AppNavbar from './AppNavbar';\n\nconst PageContainer = (props) => {\n  const { colorMode } = useColorMode();\n\n  return (\n    <Flex\n      minH='100vh'\n      width='100%'\n      flexDirection='column'\n      bg={colorMode === 'light' ? 'backgroundColor.light' : 'backgroundColor.dark'}\n      pb={4}\n    >\n      <AppNavbar />\n      <Flex\n        height='100%'\n        width='100%'\n        alignItems=\"center\"\n        justifyContent=\"top\"\n        flexDirection=\"column\"\n        pt={24}\n      >\n        {props.children}\n      </Flex>\n      {/* <Footer /> */}\n    </Flex>\n  );\n};\n\nexport default PageContainer;","import {\n  Button,\n  FormControl, FormLabel, FormErrorMessage,\n  IconButton,\n  Input,\n  Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\n\n// Redux\nimport { useDispatch } from 'react-redux';\nimport { addItem } from '../redux/slices/ShoppingListSlice';\n\n// Icons\nimport { AddIcon } from '@chakra-ui/icons';\n\nconst AddItem = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const dispatch = useDispatch();\n\n\n  const { handleSubmit, register, formState, errors } = useForm();\n  const { isSubmitting } = formState;\n\n\n  const onSubmit = async (values) => {\n    await dispatch(addItem({ name: values.item }));\n    onClose();\n  };\n\n  function validateItem (value) {\n    if (!value) {\n      return \"Item is required\";\n    } else return true;\n  }\n\n\n  return (\n    <>\n      <IconButton\n        aria-label='Add'\n        icon={<AddIcon />}\n        size='lg'\n        isRound\n        colorScheme='success'\n        variant='solid'\n        onClick={onOpen}\n      />\n      <Modal\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Add Item to Shopping List</ModalHeader>\n          <ModalCloseButton />\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <ModalBody pb={6}>\n              <FormControl isInvalid={errors.item}>\n                <FormLabel>Item</FormLabel>\n                <Input placeholder=\"Item\" name='item' ref={register({ validate: validateItem })} autoFocus />\n                <FormErrorMessage>\n                  {errors.item && errors.item.message}\n                </FormErrorMessage>\n              </FormControl>\n            </ModalBody>\n\n            <ModalFooter>\n              <Button type='submit' colorScheme=\"success\" mr={3}\n                isLoading={isSubmitting}\n                loadingText=\"Please wait..\"\n              >\n                Save\n            </Button>\n              <Button onClick={onClose}>Cancel</Button>\n            </ModalFooter>\n          </form>\n        </ModalContent>\n      </Modal>\n\n    </>\n  );\n};\n\nexport default AddItem;\n\n\n","import {\n  Flex,\n  IconButton,\n  List,\n  ListItem,\n  Text,\n  useColorMode,\n  Fade,\n  HStack,\n  Badge,\n  Divider,\n  CircularProgress\n} from '@chakra-ui/react';\nimport React, { useEffect } from 'react';\n\n// Icons\nimport { CheckIcon, DeleteIcon } from '@chakra-ui/icons';\n\n// Redux\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteItem, checkItem, getShoppingList } from '../redux/slices/ShoppingListSlice';\n\n// other imports\nimport PageContainer from './PageContainer';\nimport AddItem from './AddItem';\n\nconst ShoppingList = () => {\n  const { colorMode } = useColorMode();\n\n\n  const { shoppingList } = useSelector(state => state.shoppingList);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getShoppingList());\n  }, [shoppingList]);\n\n  return (\n    <PageContainer>\n      <Flex\n        width={{ base: '90%', md: '400px' }}\n        bg={colorMode === 'light' ? 'boxBackgroundColor.light' : 'boxBackgroundColor.dark'}\n        rounded='lg'\n        p={5}\n        boxShadow='lg'\n        flexDirection='column'\n        justifyContent='center'\n        alignItems='center'\n      >\n        <Badge\n          fontSize=\"0.8em\"\n          colorScheme='success'\n          alignSelf='flex-end'\n        >\n          {\n            shoppingList.length > 0 ? `${shoppingList.length} ITEMS` : 'NO ITEMS'\n          }\n        </Badge>\n        {shoppingList ?\n          <List spacing='1em' mt='1em' w='100%' p={2}>\n            {\n              shoppingList.map(item => (\n                <Fade in='true' key={item.id} minw='100%'>\n                  <ListItem w='100%'>\n                    <HStack\n                      display='flex'\n                      w='100%'\n                      spacing={4}\n                    >\n                      <IconButton\n                        aria-label=\"Mark Item\"\n                        variant={item.isChecked ? 'solid' : 'outline'}\n                        size='sm'\n                        colorScheme='success'\n                        icon={<CheckIcon />}\n                        isRound\n                        onClick={() => dispatch(checkItem({ id: item._id, isChecked: !item.isChecked }))} />\n                      <Text\n                        as={item.isChecked ? 'del' : null}\n                        opacity={item.isChecked ? '0.5' : null}\n                        alignSelf='center'\n                        fontSize='xl'\n                        flexGrow='1'\n                        isTruncated\n                      >\n                        {item.name}\n                      </Text>\n                      <IconButton\n                        aria-label=\"Delete Item\"\n                        variant='solid'\n                        size='sm'\n                        colorScheme='error'\n                        icon={<DeleteIcon />}\n                        isRound\n                        onClick={() => dispatch(deleteItem({ id: item._id }))}\n                      />\n                    </HStack>\n                  </ListItem>\n                </Fade>\n              ))\n            }\n          </List>\n          : <CircularProgress isIndeterminate color=\"green.500\" />}\n\n        <Divider orientation=\"horizontal\" my={2} />\n\n        <AddItem />\n\n      </Flex>\n\n    </PageContainer >\n  );\n};\n\nexport default ShoppingList;\n","import React from 'react';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { Provider } from \"react-redux\";\n\nimport store from \"./redux/configureStore\";\nimport customTheme from './utils/theme';\nimport ShoppingList from './components/ShoppingList';\n\nfunction App () {\n\n  return (\n    <Provider store={store}>\n      <ChakraProvider theme={customTheme}>\n        <ShoppingList />\n      </ChakraProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}